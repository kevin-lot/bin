#!/usr/bin/env bash

set -o xtrace -o errexit

draw_spacer() { echo "+++++++++ +++++++++ +++++++++ +++++++++"; echo; echo; }

# don't cd before the line below
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

MATCH_SEMVER_1='s/.*v([^v].+)".*/\1/' # match when semver starts with the letter "v"
MATCH_SEMVER_2='s/.*"([^"].+)".*/\1/' # match when semver doesn't have the letter "v"

# find os
case "$(uname -s)" in
  Linux*)  OS='linux';;
  Darwin*) OS='macos';;
  *)       echo "unsupported os"; exit 1;;
esac
case "$(uname -m)" in
  x86_64)  ARCH='x64' ;;
  arm64)   ARCH='arm64' ;;
  armv7l)  ARCH='arm' ;;
  *)       log_message "Unsupported architecture"; exit 1 ;;
esac

install_awscli() {
    if [[ ${OS} == 'macos' ]]; then
        brew install awscli
        return
    fi

    echo "+++++++++ awscli install +++++++++"
    if [[ ${OS} == 'linux' ]]; then
        (
            cd "${SCRIPT_DIR}" || exit 1

            VERSION=$(aws --version 2>/dev/null)
            SUFFIX_COMMAND=""
            if [[ -n "${VERSION}" ]]; then SUFFIX_COMMAND="--update"; fi
            rm -rf awscliv2.zip &>/dev/null
            rm -rf tmp &>/dev/null
            curl -fLSs https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip -qq awscliv2.zip -d tmp
            ./tmp/aws/install --bin-dir "${HOME}/bin" --install-dir "${HOME}/.aws/aws-cli" ${SUFFIX_COMMAND}
            rm -rf awscliv2.zip &>/dev/null
            rm -rf tmp &>/dev/null
        )
    fi
}
install_circleci() {
    echo "+++++++++ circleci install +++++++++"
    curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR="${HOME}/bin" bash
}
install_lazygit() {
    echo "+++++++++ lazygit install +++++++++"
    (
        cd "${SCRIPT_DIR}" || exit 1

        LAZYGIT_VERSION=$(curl -fLSs https://api.github.com/repos/jesseduffield/lazygit/releases/latest | grep '"tag_name":' | sed -E "$MATCH_SEMVER_1")
        rm -rf lazygit &>/dev/null
        if [[ ${OS} == 'macos' ]]; then
            curl -fLSs "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Darwin_arm64.tar.gz" -o lazygit.tar.gz
        else
            curl -fLSs "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz" -o lazygit.tar.gz
        fi
        tar xzf lazygit.tar.gz lazygit
        chmod a+x lazygit
        rm -f lazygit.tar.gz &>/dev/null
    )
}
install_volta() {
    echo "+++++++++ volta install +++++++++"
    curl -fLSs https://get.volta.sh | bash -s -- --skip-setup

    cat <<"EOF"
    export VOLTA_HOME="$HOME/.volta"
    export PATH="$PATH:$VOLTA_HOME/bin"
    "$VOLTA_HOME/bin/volta" completions zsh --force --output "$ZSH_CACHE_DIR/completions/_volta" --quiet # need a restart of terminal
EOF
}
install_terragrunt() {
    echo "+++++++++ terragrunt install +++++++++"
    (
        cd "${SCRIPT_DIR}" || exit 1

        TERRAGRUNT_VERSION=$(curl -fLSs https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | grep '"tag_name":' | sed -E "$MATCH_SEMVER_2")
        rm -rf terragrunt &>/dev/null
        if [[ ${OS} == 'macos' ]]; then
            curl -fLSs "https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_darwin_arm64" -o terragrunt
        else
            curl -fLSs "https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_linux_amd64" -o terragrunt
        fi
        chmod a+x terragrunt
    )

    cat <<"EOF"
    [[ -d "$TERRAGRUNT_PATH" ]] && complete -o nospace -C "$TERRAGRUNT_PATH" terragrunt
EOF
}
install_fvm() {
    echo "+++++++++ fvm install +++++++++"
    (
        cd "${SCRIPT_DIR}" || exit 1

        FVM_VERSION=$(curl -fLSs https://api.github.com/repos/leoafarias/fvm/releases/latest | grep '"tag_name":' | sed -E "$MATCH_SEMVER_2")
        rm -rf fvm &>/dev/null
        rm -rf "${HOME}/.fvm" &>/dev/null
        if [[ ${OS} == 'macos' ]]; then
            curl -fLSs "https://github.com/leoafarias/fvm/releases/download/${FVM_VERSION}/fvm-${FVM_VERSION}-macos-arm64.tar.gz" -o fvm.tar.gz
        else
            curl -fLSs "https://github.com/leoafarias/fvm/releases/download/${FVM_VERSION}/fvm-${FVM_VERSION}-linux-x64.tar.gz" -o fvm.tar.gz
        fi
        tar xzf fvm.tar.gz
        mv fvm "${HOME}/.fvm"
        rm -rf fvm.tar.gz &>/dev/null
        ln -s "${HOME}/.fvm/fvm" fvm
        mkdir -p "${HOME}/.fvm/cache"
    )

    cat <<"EOF"
    [[ -d $HOME/.fvm/cache ]] && export FVM_CACHE_PATH="$HOME/.fvm/cache"
    [[ -d $HOME/.fvm/cache/default/bin ]] && export PATH="$PATH:$HOME/.fvm/cache/default/bin"
    [[ -d $HOME/.pub-cache/bin ]] && export PATH="$PATH:$HOME/.pub-cache/bin"
    [[ -f $HOME/.dart-cli-completion/fvm.zsh ]] && source $HOME/.dart-cli-completion/fvm.zsh
EOF
}
install_tflint() {
    if [[ ${OS} == 'macos' ]]; then
        brew install tflint
        return
    fi

    echo "+++++++++ tflint install +++++++++"
    curl -fLSs https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | TFLINT_INSTALL_PATH="${HOME}/bin" bash
}
install_tfswitch() {
    if [[ ${OS} == 'macos' ]]; then
        brew install warrensbox/tap/tfswitch
        return
    fi

    echo "+++++++++ tfswitch install +++++++++"
    curl -fLSs https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | BINDIR="${HOME}/bin" bash
}
install_omz_plugins() {
    echo "+++++++++ ohmyzsh plugins install +++++++++"
    if [[ ! -d "${HOME}/.oh-my-zsh" ]]; then exit 1; fi

    local PLUGINS_PATH="${HOME}/.oh-my-zsh/custom/plugins"

    rm -rf "${PLUGINS_PATH}/zsh-autosuggestions" &>/dev/null
    git clone https://github.com/zsh-users/zsh-autosuggestions.git "${PLUGINS_PATH}/zsh-autosuggestions"

    rm -rf "${PLUGINS_PATH}/zsh-syntax-highlighting" &>/dev/null
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${PLUGINS_PATH}/zsh-syntax-highlighting"
}
install_omz_theme() {
    echo "+++++++++ ohmyzsh theme install +++++++++"
    if [[ ! -d "${HOME}/.oh-my-zsh" ]]; then exit 1; fi

    local THEMES_PATH="${HOME}/.oh-my-zsh/custom/themes"
    rm -rf "${THEMES_PATH}/powerlevel10k" &>/dev/null
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${THEMES_PATH}/powerlevel10k"

    cat <<"EOF"
    ZSH_THEME="powerlevel10k/powerlevel10k"
EOF
}

# install packages on linux
if [[ "${OS}" == 'linux' ]]; then
    echo "+++++++++ install apt packages +++++++++"
    apt update
    apt install --yes \
        btop \
        build-essential \
        dconf-editor \
        git \
        gparted \
        gradle \
        jq \
        kazam \
        ncdu \
        neovim  \
        ngrok \
        nmap \
        pipx \
        rpi-imager \
        scrcpy \
        terminator \
        traceroute \
        xmlstarlet
fi
if [[ ${OS} == 'macos' ]]; then
    # install brew on macos
    if ! command -v brew &>/dev/null; then
        echo "+++++++++ install brew +++++++++"
        curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash

        echo "relaunch the terminal then the script";
        exit 1;
    fi

    brew update
    brew install \
        btop \
        gradle \
        jq \
        ncdu \
        neovim \
        ngrok/ngrok/ngrok \
        nmap \
        pipx \
        scrcpy \
        xmlstarlet
fi

draw_spacer
command -v git &>/dev/null || { echo "need git"; exit 1; }

install_awscli
install_circleci
install_lazygit
install_fvm
install_tflint
install_tfswitch
install_volta
install_omz_plugins
install_omz_theme

draw_spacer

pipx ensurepath
pipx list
pipx upgrade-all
! command -v awslocal &>/dev/null && pipx install awscli-local
! command -v aws-mfa &>/dev/null && pipx install aws-mfa
! command -v jp.py &>/dev/null && pipx install jmespath
! command -v yamllint &>/dev/null && pipx install yamllint
