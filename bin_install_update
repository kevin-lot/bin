#!/usr/bin/env bash

#set -o xtrace -o errexit
set -o errexit

# don't cd before the line below
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

MATCH_SEMVER_1='s/.*v([^v].+)".*/\1/' # match when semver starts with the letter "v"
MATCH_SEMVER_2='s/.*"([^"].+)".*/\1/' # match when semver doesn't have the letter "v"
ZSH_PATH="${HOME}/.zsh"
OS=$(uname -s | tr '[:upper:]' '[:lower:]')

_draw_spacer() { echo "+++++++++ +++++++++ +++++++++ +++++++++"; echo; echo; }

_get_latest_github_release() {
    local REPO=$1
    local VERSION
    for MATCH_SEMVER in "${MATCH_SEMVER_1}" "${MATCH_SEMVER_2}"; do
        VERSION=$(curl --proto '=https' --tlsv1.2 -fLSs "https://api.github.com/repos/${REPO}/releases/latest" | grep '"tag_name":' | sed -E "${MATCH_SEMVER}")
        [[ -n "${VERSION}" ]] && break
    done
    [[ -z "${VERSION}" ]] && { echo "Could not determine version for ${REPO}"; exit 1; }
    echo "${VERSION}"
}

install_act() {
    echo "+++++++++ act install +++++++++"
    BINDIR="${HOME}/bin" bash <(curl --proto '=https' --tlsv1.2 -fSs https://raw.githubusercontent.com/nektos/act/master/install.sh)
}
install_actionlint() {
    echo "+++++++++ actionlint install +++++++++"
    bash <(curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash) latest "${HOME}/bin"
}
install_awscli() {
    echo "+++++++++ awscli install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install awscli
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1

    SUFFIX_COMMAND=""
    if command -v aws &>/dev/null; then SUFFIX_COMMAND="--update"; fi
    rm -rf awscliv2.zip &>/dev/null
    rm -rf tmp &>/dev/null
    curl --proto '=https' --tlsv1.2 -fLSs https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
    unzip -qq awscliv2.zip -d tmp
    ./tmp/aws/install --bin-dir "${HOME}/bin" --install-dir "${HOME}/.aws/aws-cli" ${SUFFIX_COMMAND}
    rm -rf awscliv2.zip &>/dev/null
    rm -rf tmp &>/dev/null
}
install_circleci() {
    echo "+++++++++ circleci install +++++++++"
    DESTDIR="${HOME}/bin" bash <(curl --proto '=https' --tlsv1.2 -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh)
}
install_dagger() {
    echo "+++++++++ dagger install +++++++++"
    BIN_DIR="${HOME}/bin" sh <(curl --proto '=https' --tlsv1.2 -fLSs https://dl.dagger.io/dagger/install.sh)
}
install_fzf() {
    echo "+++++++++ fzf install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install fzf
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1
    local VERSION
    VERSION=$(_get_latest_github_release "junegunn/fzf")

    rm -rf fzf &>/dev/null
    curl --proto '=https' --tlsv1.2 -fLSs "https://github.com/junegunn/fzf/releases/download/v${VERSION}/fzf-${VERSION}-linux_amd64.tar.gz" -o fzf.tar.gz
    tar xzf fzf.tar.gz fzf
    chmod a+x fzf
    rm -f fzf.tar.gz &>/dev/null
}
install_lazygit() {
    echo "+++++++++ lazygit install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install lazygit
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1
    local VERSION
    VERSION=$(_get_latest_github_release jesseduffield/lazygit)

    rm -rf lazygit &>/dev/null
    curl --proto '=https' --tlsv1.2 -fLSs "https://github.com/jesseduffield/lazygit/releases/download/v${VERSION}/lazygit_${VERSION}_Linux_x86_64.tar.gz" -o lazygit.tar.gz
    tar xzf lazygit.tar.gz lazygit
    chmod a+x lazygit
    rm -f lazygit.tar.gz &>/dev/null
}
install_mise() {
    echo "+++++++++ mise install +++++++++"

    cd "${SCRIPT_DIR}" || exit 1
    if [[ "${OS}" == "darwin" ]]; then
        curl --proto '=https' --tlsv1.2 https://mise.jdx.dev/mise-latest-macos-arm64 > ./mise
    else
        curl --proto '=https' --tlsv1.2 https://mise.jdx.dev/mise-latest-linux-x64 > ./mise
    fi
    chmod +x ./mise

    cat <<"EOF"
    command -v mise &>/dev/null && {
        eval "$(mise activate zsh)"
        eval "$(mise hook-env -s zsh)"
        rehash
        LOADED+=("mise")
    }
EOF
}
install_starship() {
    echo "+++++++++ starship install +++++++++"
    BIN_DIR="${HOME}/bin" FORCE=1 sh <(curl --proto '=https' --tlsv1.2 -sS https://starship.rs/install.sh)
}
install_terraform_docs() {
    echo "+++++++++ terraform docs install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install terraform-docs
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1
    local VERSION
    VERSION=$(_get_latest_github_release terraform-docs/terraform-docs)

    rm -rf terraform-docs &>/dev/null
    curl --proto '=https' --tlsv1.2 -fLSs "https://github.com/terraform-docs/terraform-docs/releases/download/v${VERSION}/terraform-docs-v${VERSION}-linux-amd64.tar.gz" -o terraform-docs.tar.gz
    tar xzf terraform-docs.tar.gz terraform-docs
    chmod +x terraform-docs
    rm -rf terraform-docs.tar.gz &>/dev/null

    cat <<"EOF"
    [[ -f "${BIN_PATH}/bin/terraform-docs" ]] && eval "$(terraform-docs completion zsh)"
EOF
}
install_terragrunt() {
    echo "+++++++++ terragrunt install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install terragrunt
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1
    local VERSION
    VERSION=$(_get_latest_github_release gruntwork-io/terragrunt)

    rm -rf terragrunt &>/dev/null
    curl --proto '=https' --tlsv1.2 -fLSs "https://github.com/gruntwork-io/terragrunt/releases/download/v${VERSION}/terragrunt_linux_amd64" -o terragrunt
    chmod a+x terragrunt

    cat <<"EOF"
    [[ -f "${BIN_PATH}/bin/terragrunt" ]] && complete -o nospace -C "${BIN_PATH}/bin/terragrunt" terragrunt
EOF
}
install_tflint() {
    echo "+++++++++ tflint install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install tflint
        return
    fi

    TFLINT_INSTALL_PATH="${HOME}/bin" bash <(curl --proto '=https' --tlsv1.2 -fLSs https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh)
}
install_tfswitch() {
    echo "+++++++++ tfswitch install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install warrensbox/tap/tfswitch
        return
    fi

    # not compatible with darwin use brew
    BINDIR="${HOME}/bin" bash <(curl --proto '=https' --tlsv1.2 -fLSs https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh)
}
install_zsh_plugins() {
    echo "+++++++++ zsh plugins install +++++++++"

    local INSTALL_PATH=""

    INSTALL_PATH="${ZSH_PATH}/zsh-autosuggestions"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-autosuggestions.git "${INSTALL_PATH}"

    INSTALL_PATH="${ZSH_PATH}/zsh-syntax-highlighting"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${INSTALL_PATH}"

    INSTALL_PATH="${ZSH_PATH}/zsh-history-substring-search"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-history-substring-search "${INSTALL_PATH}"
}

if [[ "${OS}" == "linux" ]]; then
    echo "+++++++++ install apt packages +++++++++"
    apt update
    apt install --yes \
        bat \
        btop \
        git \
        jq \
        ncdu \
        neovim  \
        nmap \
        pipx \
        python3 \
        scrcpy \
        xmlstarlet \
        yq
    # common with diff name
    apt install --yes \
        git-delta \
        ngrok
    # linux only
    apt install --yes \
        build-essential \
        dconf-editor \
        gparted \
        rpi-imager \
        terminator \
        traceroute
fi
if [[ "${OS}" == "darwin" ]]; then
    command -v git &>/dev/null || { echo "git is required"; exit 1; }
    command -v brew &>/dev/null || { echo "brew is required"; exit 1; }

    brew update
    brew upgrade
    brew install \
        bat \
        btop \
        git \
        jq \
        ncdu \
        neovim \
        nmap \
        pipx \
        python3 \
        scrcpy \
        xmlstarlet \
        yq
    # common with diff name
    brew install \
        delta
        # ngrok/ngrok/ngrok \
    # macos only
#    brew install \
#        colima\
#        docker \
#        docker-compose \
#        docker-credential-helper
fi

command -v git &>/dev/null || { echo "git is required"; exit 1; }

_draw_spacer

install_act
install_actionlint
install_awscli
install_circleci
install_dagger
install_fzf
install_lazygit
install_mise
install_starship
install_terraform_docs
install_terragrunt
install_tflint
install_tfswitch
install_zsh_plugins

_draw_spacer

pipx ensurepath
pipx list
pipx upgrade-all
! command -v awslocal &>/dev/null && pipx install awscli-local
! command -v aws-mfa &>/dev/null && pipx install aws-mfa
! command -v jp.py &>/dev/null && pipx install jmespath
! command -v yamllint &>/dev/null && pipx install yamllint
