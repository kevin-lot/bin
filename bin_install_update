#!/usr/bin/env bash

set -o xtrace -o errexit

# don't cd before the line below
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

MATCH_SEMVER_1='s/.*v([^v].+)".*/\1/' # match when semver starts with the letter "v"
MATCH_SEMVER_2='s/.*"([^"].+)".*/\1/' # match when semver doesn't have the letter "v"
ZSH_PATH="${HOME}/.zsh"
OS=$(uname -s | tr '[:upper:]' '[:lower:]')

draw_spacer() { echo "+++++++++ +++++++++ +++++++++ +++++++++"; echo; echo; }

install_awscli() {
    echo "+++++++++ awscli install +++++++++"

    if [[ "${OS}" == "darwin" ]]; then
        brew install awscli
        return
    fi

    # linux
    (
        cd "${SCRIPT_DIR}" || exit 1

        SUFFIX_COMMAND=""
        if command -v aws &>/dev/null; then SUFFIX_COMMAND="--update"; fi
        rm -rf awscliv2.zip &>/dev/null
        rm -rf tmp &>/dev/null
        curl -fLSs https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
        unzip -qq awscliv2.zip -d tmp
        ./tmp/aws/install --bin-dir "${HOME}/bin" --install-dir "${HOME}/.aws/aws-cli" ${SUFFIX_COMMAND}
        rm -rf awscliv2.zip &>/dev/null
        rm -rf tmp &>/dev/null
    )
}
install_circleci() {
    echo "+++++++++ circleci install +++++++++"
    (
        curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR="${HOME}/bin" bash
    )
}
install_dagger() {
    echo "+++++++++ dagger install +++++++++"
    (
        curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR="${HOME}/bin" sh
    )
}
install_fzf() {
    echo "+++++++++ fzf install +++++++++"
    (
        cd "${SCRIPT_DIR}" || exit 1
        local VERSION

        rm -rf fzf &>/dev/null
        VERSION=$(curl -fLSs https://api.github.com/repos/junegunn/fzf/releases/latest | grep '"tag_name":' | sed -E "$MATCH_SEMVER_1")
        if [[ "${OS}" == "darwin" ]]; then
            curl -fLSs "https://github.com/junegunn/fzf/releases/download/v${VERSION}/fzf-${VERSION}-darwin_arm64.tar.gz" -o fzf.tar.gz
        else
            curl -fLSs "https://github.com/junegunn/fzf/releases/download/v${VERSION}/fzf-${VERSION}-linux_amd64.tar.gz" -o fzf.tar.gz
        fi
        tar xzf fzf.tar.gz fzf
        chmod a+x fzf
        rm -f fzf.tar.gz &>/dev/null
    )
}
install_lazygit() {
    echo "+++++++++ lazygit install +++++++++"
    (
        cd "${SCRIPT_DIR}" || exit 1
        local VERSION

        rm -rf lazygit &>/dev/null
        VERSION=$(curl -fLSs https://api.github.com/repos/jesseduffield/lazygit/releases/latest | grep '"tag_name":' | sed -E "$MATCH_SEMVER_1")
        if [[ "${OS}" == "darwin" ]]; then
            curl -fLSs "https://github.com/jesseduffield/lazygit/releases/download/v${VERSION}/lazygit_${VERSION}_Darwin_arm64.tar.gz" -o lazygit.tar.gz
        else
            curl -fLSs "https://github.com/jesseduffield/lazygit/releases/download/v${VERSION}/lazygit_${VERSION}_Linux_x86_64.tar.gz" -o lazygit.tar.gz
        fi
        tar xzf lazygit.tar.gz lazygit
        chmod a+x lazygit
        rm -f lazygit.tar.gz &>/dev/null
    )
}
install_mise() {
    echo "+++++++++ mise install +++++++++"
    (
        cd "${SCRIPT_DIR}" || exit 1

        if [[ "${OS}" == "darwin" ]]; then
            curl https://mise.jdx.dev/mise-latest-macos-arm64 > ./mise
        else
            curl https://mise.jdx.dev/mise-latest-linux-x64 > ./mise
        fi
        chmod +x ./mise
    )

    cat <<"EOF"
    eval "$(""${HOME}/bin/mise"" activate zsh)"
    eval "$(""${HOME}/bin/mise"" hook-env -s zsh)"
EOF
}
install_starship() {
    if [[ "${OS}" == "darwin" ]]; then
        brew install starship
        return
    fi

    echo "+++++++++ starship install +++++++++"
    curl -sS https://starship.rs/install.sh | BIN_DIR="${HOME}/bin" sh
}
install_terraform_docs() {
    echo "+++++++++ terraform docs install +++++++++"
    if [[ "${OS}" == "darwin" ]]; then
        brew install terraform-docs
        return
    fi

    (
        cd "${SCRIPT_DIR}" || exit 1
        local VERSION

        VERSION=$(curl -fLSs https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | grep '"tag_name":' | sed -E "$MATCH_SEMVER_2")
        rm -rf terraform-docs &>/dev/null
        curl -fLSs "https://github.com/terraform-docs/terraform-docs/releases/download/${VERSION}/terraform-docs-${VERSION}-linux-amd64.tar.gz" -o terraform-docs.tar.gz
        tar xzf terraform-docs.tar.gz terraform-docs
        chmod +x terraform-docs
        rm -rf terraform-docs.tar.gz &>/dev/null
    )
}
install_terragrunt() {
    echo "+++++++++ terragrunt install +++++++++"
    if [[ "${OS}" == "darwin" ]]; then
        brew install terragrunt
        return
    fi

    (
        cd "${SCRIPT_DIR}" || exit 1
        local VERSION

        VERSION=$(curl -fLSs https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | grep '"tag_name":' | sed -E "$MATCH_SEMVER_2")
        rm -rf terragrunt &>/dev/null
        curl -fLSs "https://github.com/gruntwork-io/terragrunt/releases/download/${VERSION}/terragrunt_linux_amd64" -o terragrunt
        chmod a+x terragrunt
    )

    cat <<"EOF"
    [[ -d "$TERRAGRUNT_PATH" ]] && complete -o nospace -C "$TERRAGRUNT_PATH" terragrunt
EOF
}
install_tflint() {
    if [[ "${OS}" == "darwin" ]]; then
        brew install tflint
        return
    fi

    echo "+++++++++ tflint install +++++++++"
    curl -fLSs https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | TFLINT_INSTALL_PATH="${HOME}/bin" bash
}
install_tfswitch() {
    if [[ "${OS}" == "darwin" ]]; then
        brew install warrensbox/tap/tfswitch
        return
    fi

    echo "+++++++++ tfswitch install +++++++++"
    curl -fLSs https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | BINDIR="${HOME}/bin" bash
}
install_zsh_plugins() {
    echo "+++++++++ zsh plugins install +++++++++"
    local INSTALL_PATH=""

    INSTALL_PATH="${ZSH_PATH}/zsh-autosuggestions"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-autosuggestions.git "${INSTALL_PATH}"

    INSTALL_PATH="${ZSH_PATH}/zsh-syntax-highlighting"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${INSTALL_PATH}"

    INSTALL_PATH="${ZSH_PATH}/zsh-history-substring-search"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-history-substring-search "${INSTALL_PATH}"
}
install_zsh_theme() {
    echo "+++++++++ zsh theme install +++++++++"

    local INSTALL_PATH=""
    INSTALL_PATH="${ZSH_PATH}/powerlevel10k"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${INSTALL_PATH}"
}

# install packages on linux
if [[ "${OS}" == "linux" ]]; then
    echo "+++++++++ install apt packages +++++++++"
    apt update
    # common
    apt install --yes \
        bat \
        btop \
        git \
        jq \
        ncdu \
        neovim  \
        nmap \
        pipx \
        python3 \
        scrcpy \
        xmlstarlet \
        yq
    # common with diff name
    apt install --yes \
        git-delta \
        ngrok
    # linux only
    apt install --yes \
        build-essential \
        dconf-editor \
        gparted \
        rpi-imager \
        terminator \
        traceroute
fi
if [[ "${OS}" == "darwin" ]]; then
    # install brew on macos
    if ! command -v brew &>/dev/null; then
        echo "+++++++++ install brew +++++++++"
        curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash

        echo "relaunch the terminal then the script";
        exit 1;
    fi
    brew update
    brew upgrade
    # common
    brew install \
        bat \
        btop \
        git \
        jq \
        ncdu \
        neovim \
        pipx \
        python3 \
        scrcpy \
        xmlstarlet \
        yq
        # nmap \
    # common with diff name
    brew install \
        delta
        # ngrok/ngrok/ngrok \
    # macos only
#    brew install \
#        colima\
#        docker \
#        docker-compose \
#        docker-credential-helper
fi

draw_spacer
command -v git &>/dev/null || { echo "need git"; exit 1; }

install_awscli
install_circleci
install_dagger
install_fzf
install_lazygit
install_mise
install_starship
install_terraform_docs
install_terragrunt
install_tflint
install_tfswitch
install_zsh_plugins
install_zsh_theme

draw_spacer

pipx ensurepath
pipx list
pipx upgrade-all
! command -v awslocal &>/dev/null && pipx install awscli-local
! command -v aws-mfa &>/dev/null && pipx install aws-mfa
! command -v jp.py &>/dev/null && pipx install jmespath
! command -v yamllint &>/dev/null && pipx install yamllint
