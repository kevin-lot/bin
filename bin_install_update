#!/usr/bin/env bash

#set -o xtrace -o errexit
set -o errexit

# don't cd before the line below
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

MATCH_SEMVER_1='s/.*v([^v].+)".*/\1/' # match when semver starts with the letter "v"
MATCH_SEMVER_2='s/.*"([^"].+)".*/\1/' # match when semver doesn't have the letter "v"
ZSH_PATH="${HOME}/.zsh"
OS=$(uname -s | tr '[:upper:]' '[:lower:]')

_draw_spacer() { echo "+++++++++ +++++++++ +++++++++ +++++++++"; echo; echo; }
_draw_title() { echo "+++++++++ ${1} +++++++++"; echo; echo; }
_get_latest_github_release() {
    local REPO=$1
    local VERSION
    for MATCH_SEMVER in "${MATCH_SEMVER_1}" "${MATCH_SEMVER_2}"; do
        VERSION=$(curl --proto "=https" --tlsv1.2 -fLSs "https://api.github.com/repos/${REPO}/releases/latest" | grep '"tag_name":' | sed -E "${MATCH_SEMVER}")
        [[ -n "${VERSION}" ]] && break
    done
    [[ -z "${VERSION}" ]] && { echo "Could not determine version for ${REPO}"; exit 1; }
    echo "${VERSION}"
}

install_fzf() {
    _draw_title "fzf install"

    if [[ "${OS}" == "darwin" ]]; then
        brew install fzf
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1
    local VERSION
    VERSION=$(_get_latest_github_release "junegunn/fzf")

    rm -rf fzf &>/dev/null
    curl --proto "=https" --tlsv1.2 -fLSs "https://github.com/junegunn/fzf/releases/download/v${VERSION}/fzf-${VERSION}-linux_amd64.tar.gz" --output fzf.tar.gz
    tar xzf fzf.tar.gz fzf
    chmod a+x ./fzf
    rm -f fzf.tar.gz &>/dev/null
}
install_lazygit() {
    _draw_title "lazygit install"

    if [[ "${OS}" == "darwin" ]]; then
        brew install lazygit
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1
    local VERSION
    VERSION=$(_get_latest_github_release "jesseduffield/lazygit")

    rm -rf lazygit &>/dev/null
    curl --proto "=https" --tlsv1.2 -fLSs "https://github.com/jesseduffield/lazygit/releases/download/v${VERSION}/lazygit_${VERSION}_Linux_x86_64.tar.gz" --output lazygit.tar.gz
    tar xzf lazygit.tar.gz lazygit
    chmod a+x ./lazygit
    rm -f lazygit.tar.gz &>/dev/null
}
install_mise() {
    _draw_title "mise install"

    if type -p mise >/dev/null; then
       return;
    fi

    if [[ "${OS}" == "darwin" ]]; then
        brew install mise
    else
        (
            type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)
            type -p gpg >/dev/null || (sudo apt update && sudo apt-get install gpg -y)
            sudo install -dm 755 /etc/apt/keyrings
            wget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg] https://mise.jdx.dev/deb stable main" | sudo tee /etc/apt/sources.list.d/mise.list > /dev/null
            sudo apt update
            sudo apt install -y mise
        )
    fi

    cat <<"EOF"
    command -v mise &>/dev/null && {
        eval "$(mise activate zsh)"
        eval "$(mise hook-env -s zsh)"
        rehash
        LOADED+=("mise")
    }
EOF
}
install_starship() {
    _draw_title "starship install"
    BIN_DIR="${HOME}/bin" FORCE=1 sh <(curl --proto "=https" --tlsv1.2 -sS https://starship.rs/install.sh)
}
install_zsh_plugins() {
    _draw_title "zsh plugins install"

    [[ -d "${ZSH_PATH}" ]] || install -d -m 700 "${ZSH_PATH}"
    local INSTALL_PATH=""

    INSTALL_PATH="${ZSH_PATH}/zsh-autosuggestions"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-autosuggestions.git "${INSTALL_PATH}"

    INSTALL_PATH="${ZSH_PATH}/zsh-syntax-highlighting"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${INSTALL_PATH}"

    INSTALL_PATH="${ZSH_PATH}/zsh-history-substring-search"
    rm -rf "${INSTALL_PATH}" &>/dev/null
    git clone https://github.com/zsh-users/zsh-history-substring-search "${INSTALL_PATH}"
}

# wiz is not yet included in mise registry
install_wiz() {
    _draw_title "wiz install"

    if [[ "${OS}" == "darwin" ]]; then
        brew install --cask wizcli
        return
    fi

    cd "${SCRIPT_DIR}" || exit 1
    if [[ "${OS}" == "linux" ]]; then
        curl --proto "=https" --tlsv1.2 -fLSs https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 --output wizcli
    fi
    chmod a+x ./wizcli
}

if [[ "${OS}" == "linux" ]]; then
    _draw_title "install apt packages"
    apt update
    # linux only
    apt install --yes \
        build-essential \
        dconf-editor \
        gparted \
        rpi-imager \
        terminator \
        traceroute
    # common
    apt install --yes \
        bat \
        btop \
        git \
        jq \
        ncdu \
        neovim  \
        nmap \
        pipx \
        python3 \
        scrcpy \
        xmlstarlet \
        yq
    # common with diff name
    apt install --yes \
        git-delta \
        jp \
        ngrok
fi
if [[ "${OS}" == "darwin" ]]; then
    command -v git &>/dev/null || { echo "git is required"; exit 1; }
    command -v brew &>/dev/null || { echo "brew is required"; exit 1; }
    _draw_title "install brew packages"
    brew update && brew upgrade
    # common
    brew install \
        bat \
        btop \
        git \
        jq \
        ncdu \
        neovim \
        nmap \
        pipx \
        python3 \
        scrcpy \
        xmlstarlet \
        yq
    # common with diff name
    brew install \
        delta \
        jmespath/jmespath/jp
        # ngrok/ngrok/ngrok \
    # macos only
#    brew install \
#        colima\
#        docker \
#        docker-compose \
#        docker-credential-helper
fi

type -p git >/dev/null || { echo "git is required"; exit 1; }

install_fzf
install_lazygit
install_mise
install_starship
install_zsh_plugins

_draw_spacer

type -p mise >/dev/null || { echo "mise is required"; exit 1; }

mise use --global act@latest
mise use --global actionlint@latest
mise use --global awscli@latest
mise use --global circleci@latest
mise use --global dagger@latest
mise use --global gh@latest
mise use --global poetry@latest
mise use --global terraform-docs@latest && {
    cat <<"EOF"
    [[ -f "${BIN_PATH}/bin/terraform-docs" ]] && eval "$(terraform-docs completion zsh)"
EOF
}
mise use --global terragrunt@latest && {
    cat <<"EOF"
    [[ -f "${BIN_PATH}/bin/terragrunt" ]] && complete -o nospace -C "${BIN_PATH}/bin/terragrunt" terragrunt
EOF
}
mise use --global tflint@latest
mise use --global uv@latest
mise use --global yamllint@latest

_draw_spacer

install_wiz

_draw_spacer

pipx ensurepath
pipx list
pipx upgrade-all
! command -v awslocal &>/dev/null && pipx install awscli-local
! command -v aws-mfa &>/dev/null && pipx install aws-mfa

#cat <<"EOF"
#    command -v poetry &>/dev/null && {
#        eval "$(mise activate zsh)"
#        eval "$(mise hook-env -s zsh)"
#        rehash
#        LOADED+=("mise")
#    }
#EOF
